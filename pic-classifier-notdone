import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input, decode_predictions
import numpy as np
import sys





def load_custom_model():
    base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(224, 224, 3))
    global_average = tf.keras.layers.GlobalAveragePooling2D()(base_model.output)
    prediction = tf.keras.layers.Dense(1000, activation='softmax')(global_average)
    custom_model_instance = tf.keras.models.Model(inputs=base_model.input, outputs=prediction)
    return custom_model_instance




def preprocess_custom_image(img_path):
    img = image.load_img(img_path, target_size=(224, 224))
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    return preprocess_input(img_array)

def classify_custom_image(model_instance, img_path):
    preprocessed_custom_img = preprocess_custom_image(img_path)
    predictions = model_instance.predict(preprocessed_custom_img)
    decoded_predictions = decode_predictions(predictions, top=3)[0]
    return decoded_predictions





if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python image_classifier.py <image_path>")
        sys.exit(1)

    image_path = sys.argv[1]
    model = load_custom_model()
    predictions_result = classify_custom_image(model, image_path)
    print("Predictions:")
    for pred in predictions_result:
        print(f"{pred[1]}: {pred[2]*100:.2f}%")
  
